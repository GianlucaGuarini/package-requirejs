#!/usr/bin/env node

'use strict';

var
// Node internal libs
	fs = require('fs'),
	path = require('path'),
	// scripts that cannot be loaded by nodejs
	// just frontend script like jquery plugins...
	fallbackDependencies = {},
	// variable where I will cache all the dependencies
	paths = {},
	shim = {},
	// read the command line inputs or just use the default values
	// the path and the name of the file to output the requirejs configuration
	outputFile = process.argv[2] || 'requirejs-config.js',
	// url to prepend to each dependency path
	baseUrl = process.argv[3] || '',
	// shuld it find also the nested dependencies?
	nestedDependencies = process.argv[4] === 'false' ? false : true,
	// normally you should loop the children of the "dependencies" attribute into the package.json file
	// but you can use also another property to store them
	dependeciesKey = process.argv[5] || 'dependencies',
	regExpDependencyExtensions = /(.js|.js.js|.git)$/,
	// the requirejs config template
	requirejsTpl = 'requirejs.config({\npaths: @paths,\nshim: @shim\n});',
	// read the package json in the current folder
	packageJSON = JSON.parse(fs.readFileSync('package.json', 'utf8')),
	/**
	 * Return the relative path of the javascript module installed
	 * @param  { String } absoluteDependencyPath - absolute system path to the module
	 * @return { String }
	 */
	getRelativePath = function(absoluteDependencyPath) {
		return baseUrl + path.relative(process.cwd(), absoluteDependencyPath).replace(regExpDependencyExtensions, '');
	},
	/**
	 * Loop an entire folder trying to find a sepcific javascript file
	 * @param  { String } dir - directory path
	 * @param  { String } fileName - it's the name of the javascript without the .js extension
	 * @return { String | Undefined } if the file gets found it returns its path
	 */
	find = function(dir, fileName) {
		// read the directory files
		var files = fs.readdirSync(dir),
			ret;

		// loop all the files
		for (var i = files.length - 1; i > 0; i--) {
			var file = files[i],
				tmpFilePath = dir + '/' + file,
				stat = fs.statSync(tmpFilePath);

			if (stat && stat.isDirectory()) {
				ret = find(tmpFilePath, fileName);
			} else {
				if (getDependencyId(tmpFilePath) === fileName) {
					ret = tmpFilePath;
					break;
				}
			}
		}

		return ret;

	},
	/**
	 * Get the dependency id by any path ( git or local system )
	 * @param  { String } absoluteDependencyPath - path to the module
	 * @return { String }
	 */
	getDependencyId = function(absoluteDependencyPath) {
		var pathSplit = absoluteDependencyPath.split('/'),
			detectedId = pathSplit[pathSplit.length - 1].replace(regExpDependencyExtensions, '');

		if (detectedId === 'index') {
			detectedId = pathSplit[pathSplit.length - 2];
		}
		return detectedId;
	},
	/**
	 * Some libraries ( ex: the jquery.myPlugin ) could have their dependencies in the file name
	 * Create a shim also for this modules
	 * @param  { String } dependencyName - dependency id
	 */
	setDependenciesByFileName = function(dependencyName) {
		// split the dependency name in fragment divided by (. or - or _)
		var dependencyNameFragments = dependencyName.split(/[.|-|_]/g);



		// not enough fragments
		if (dependencyNameFragments.length === 1) return;



		// loop all the fragments
		dependencyNameFragments.forEach(function(fragment) {
			// loop again all the dependencies
			Object.keys(paths).concat(Object.keys(fallbackDependencies)).forEach(function(tmpDependencyName) {

				// a dependency cannot be a shim of itself
				if (tmpDependencyName === dependencyName) return;

				// check if the fragment could be related to another dependency
				if (new RegExp(fragment, 'i').test(tmpDependencyName)) {

					if (!shim[dependencyName])
						shim[dependencyName] = [];

					if (!~shim[dependencyName].indexOf(tmpDependencyName))
						shim[dependencyName].push(tmpDependencyName);
				}
			});
		});
	},
	/**
	 * Recursive function to get all the nested dependencies
	 * @param  { Object } dependency - node module object
	 */
	findNestedDepenencies = function(dependency) {
		var dependencyName = getDependencyId(dependency.filename);

		if (nestedDependencies) {
			// check the module dependencies
			if (dependency.children.length) {
				shim[dependencyName] = [];
				dependency.children.forEach(findNestedDepenencies);
			}

			// include the subDependencies inside the shim
			if (dependency.parent.id !== '.') {
				shim[getDependencyId(dependency.parent.filename)].push(dependencyName);
			}
		}

		paths[dependencyName] = getRelativePath(dependency.filename);
	};

if (!packageJSON[dependeciesKey]) {
	console.log('\x1B[31m It looks like the key "' + dependeciesKey + '" is missing in your package.json \x1B[39m');
	return;
}

// loop all the package.json dependencies
Object.keys(packageJSON[dependeciesKey]).forEach(function(dependency) {
	var dependencyPath = process.cwd() + '/node_modules/' + dependency;

	// try loading the dependency as nodejs module
	try {
		require(dependencyPath);
	} catch (error) {
		// this module cannot be loaded in nodejs so we use a fallback
		var fileName = getDependencyId(packageJSON[dependeciesKey][dependency]),
			pathToTheFile = find(dependencyPath, fileName);
		if (pathToTheFile) {
			paths[fileName] = fallbackDependencies[fileName] = getRelativePath(pathToTheFile);
		}
	}
});

// loop all the modules just loaded before
module.children.forEach(findNestedDepenencies);

// loop again all the dependencies to find dependencies in their file name
Object.keys(fallbackDependencies).forEach(setDependenciesByFileName);

// print the output
fs.writeFile(outputFile,
	requirejsTpl.replace('@paths', JSON.stringify(paths, null, 2)).replace('@shim', JSON.stringify(shim, null, 2))
);

console.log('\x1B[32m The requirejs configuration file has been created: ' + outputFile + '\x1B[39m');